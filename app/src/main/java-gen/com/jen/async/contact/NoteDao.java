package com.jen.async.contact;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jen.async.contact.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Contact_id = new Property(1, String.class, "contact_id", false, "CONTACT_ID");
        public final static Property Display_name = new Property(2, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Raw_contact_id = new Property(3, String.class, "raw_contact_id", false, "RAW_CONTACT_ID");
        public final static Property Version = new Property(4, String.class, "version", false, "VERSION");
        public final static Property Creation_time = new Property(5, String.class, "creation_time", false, "CREATION_TIME");
        public final static Property Last_time = new Property(6, String.class, "last_time", false, "LAST_TIME");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONTACT_ID\" TEXT NOT NULL ," + // 1: contact_id
                "\"DISPLAY_NAME\" TEXT NOT NULL ," + // 2: display_name
                "\"RAW_CONTACT_ID\" TEXT NOT NULL ," + // 3: raw_contact_id
                "\"VERSION\" TEXT," + // 4: version
                "\"CREATION_TIME\" TEXT," + // 5: creation_time
                "\"LAST_TIME\" TEXT);"); // 6: last_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContact_id());
        stmt.bindString(3, entity.getDisplay_name());
        stmt.bindString(4, entity.getRaw_contact_id());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(5, version);
        }
 
        String creation_time = entity.getCreation_time();
        if (creation_time != null) {
            stmt.bindString(6, creation_time);
        }
 
        String last_time = entity.getLast_time();
        if (last_time != null) {
            stmt.bindString(7, last_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // contact_id
            cursor.getString(offset + 2), // display_name
            cursor.getString(offset + 3), // raw_contact_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // version
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // creation_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // last_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContact_id(cursor.getString(offset + 1));
        entity.setDisplay_name(cursor.getString(offset + 2));
        entity.setRaw_contact_id(cursor.getString(offset + 3));
        entity.setVersion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreation_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLast_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
